(use-modules (pass1))
(use-modules (pass2))
(use-modules (pass97))
(use-modules (pass98))
(use-modules (pass99))
(use-modules (util))
(use-modules (ice-9 pretty-print))

(define (print-help-and-exit) 
        (display "arguments: schwasm.scm [input.scm] [out.wat]")
        (exit))

(if (not (eq? (length (command-line)) 3))
    (print-help-and-exit))

(define input-file (list-ref (command-line) 1))
(define output-file (list-ref (command-line) 2))

(define (read-all)
    (let ((o (read)))
        (if (eof-object? o) '() (cons o (read-all)))))

(define (read-input-file)
    (with-input-from-file input-file read-all))

(define (write-output-file output)
    (if (file-exists? output-file) (delete-file output-file))
    (let ((p (open-output-file output-file)))
        (pretty-print output p)
        (close-output-port p)))

(let* ((input (read-input-file))
       (pass1 (scheme->pass1 input))
       (pass2 (pass1->pass2 pass1))
       (flat  (flatten-cps pass2))
       (funcs (lift-closures flat #t))
       (wat   (funcs->wat funcs)))

    (display "pass1:\n")
    (pretty-print pass1)
    (display "pass2:\n")
    (pretty-print pass2)
    (display "flat:\n")
    (pretty-print flat)
    (display "\nfuncs:\n")
    (pretty-print funcs)
    (display "\nwat:\n")
    (pretty-print wat)
    (write-output-file wat))
(exit)